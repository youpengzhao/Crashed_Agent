# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
batch_size_run: 1 # Number of environments to run in parallel
test_nepisode: 20 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 10000 # Stop running after this many timesteps
use_cuda: True # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram
final_test: False   # Use the final model to test the performance
performance_dir: "./results/performance/performance.txt"   # Record the performance of the model as a txt file in this path and it is usually used in test_mode
offline: False        # Determine if there are crashed agents. This is used for set a fixed number of crashed agents.
offline_num: 1        # Set a fixed number of crashed agents during the experiment. If offline is False, this item doesn't matter
offline_lr: 0       # The learning rate of the adaptive drop rate. If this item > 0, our adaptive framework is running.
offline_alpha: 0        # The adaptive drop rate and the value represents its initial value.
win_gate: 0.75          # The threshold that helps update the adaptive crash rate
crashed: 0         # Set a fixed crash rate during the experiment
resample: 1         # Determine whether to re-sample in our method and 1 represents re-sampling
curriculum: False
curri_start: 0        # Measured by the t_max
curri_end:  0.5
curri_max: 0.1       # The final crash rate during curriculum learning

# Note that offline_num and offline have to be used as a pair while crashed can only be used (crashed>0) when offline is False.
# Offline_num and crashed represents the two variants of the baseline so they conflicts with offline_lr.

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
save_model: False # Save the models to disk
save_model_interval: 2000000 # Save models after this many timesteps
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
critic_lr: 0.0005 # Learning rate for critics
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm

# --- Agent parameters ---
agent: "rnn" # Default rnn agent
rnn_hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: True # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation

# --- Experiment running params ---
repeat_id: 1
label: "default_label"
